%YAML 1.2
---
# http: //www.sublimetext.com/docs/3/syntax.html
name: llvm
scope: source.ll
contexts:
  main:
    - include: function-headers
    - include: keywords
    - include: strings
    - include: decorators
    - include: numbers
    - include: comments
    - include: literals
    - include: punctuation
    - include: types
    - include: variables
  variables:
    - match: '@[-a-zA-Z$._][-a-zA-Z$._0-9]*'
      scope: constant.other
    - match: '%[-a-zA-Z$._][-a-zA-Z$._0-9]*'
      scope: variable.other
    - match: '[-a-zA-Z$._][-a-zA-Z$._0-9]*:(\n| )'
      scope: variable.other.block-label.llvm
  comments:
    - match: ;.*$
      scope: comment.llvm
  decorators:
    - match: '((#|!)[a-zA-Z0-9.]+)\b'
      scope: entity.other.attribute-name
  function-headers:
    - match: '(@[a-zA-Z0-9.-]+)(\()'
      captures:
        "1": entity.name.function
        "2": punctuation.separator.parameters.begin.llvm
      push:
        - match: \)
          pop: true
        - include: punctuation
        - include: numbers
        - include: types
        - include: decorators
        - include: variables
  keywords:
    - match: '\b(?<![%\.])(ret|call|br)\b'
      scope: keyword.control.flow.llvm
    - match: '\b(?<![%\.])(add|alloca|and|ashr|atomicrmw|attributes|bitcast|call|cmpxchg|declare|define|exact|extractelement|extractvalue|fadd|fcmp|fdiv|fence|fmul|fpext|fptosi|fptoui|fptrunc|frem|fsub|getelementptr|global|indirectbr|insertelement|insertvalue|inttoptr|invoke|landingpad|load|lshr|mul|one|or|ord|phi|ptrtoint|resume|ret|sdiv|select|sext|shl|shufflevector|sitofp|srem|store|sub|switch|target|trunc|type|udiv|uitofp|unreachable|unwind|urem|va_arg|xor|zext)\b'
      scope: keyword.other.llvm 
    - match: '\bicmp +[a-z]+\b'
      scope: keyword.other.llvm 
    - match: "="
      scope: keyword.operator.assignment
    - match: \b(to)\b
      scope: keyword.operator
  literals:
    - match: \b(true|false|null|none)\b
      scope: constant.language.llvm
    - include: numbers
  numbers:
    - match: '\b(?<![%!.#+])(\d+)(?!\.)\b'
      scope: constant.numeric.integer.llvm
    - match: \b((\d+)\.(\d+))\b
      scope: constant.numeric.float.llvm
    - match: '\b(?<![%!#])(0(x|X)[0-9a-fA-F]+)\b'
      scope: constant.numeric.hex.llvm
    - match: \b((\d+)\.(\d+)e\+(\d+))\b
      scope: constant.numeric.hex.llvm
  punctuation:
    - match: ":"
      scope: punctuation.separator.colon.llvm
    - match: ","
      scope: punctuation.separator.element.llvm
    - match: \(
      scope: punctuation.separator.parameters.begin.llvm
    - match: \)
      scope: punctuation.separator.parameters.end.llvm
    - match: "{"
      scope: punctuation.section.block.begin.bracket.curly.llvm
    - match: "}"
      scope: punctuation.section.block.end.bracket.curly.llvm
    - match: (\*)
      scope: punctuation.definition.decorator.llvm
    - match: '!(?=")'
      scope: string.interpolated.llvm
    - match: "!(?={)"
      scope: punctuation.section.block.begin.llvm
    - match: \.\.\.
      scope: punctuation.definition.destructure.llvm
  strings:
    - match: '"'
      push:
        - meta_scope: string.quoted.double.llvm
        - match: '"'
          pop: true
  types:
    - match: ( *)((%)struct(\.)\w*)\b
      scope: entity.name.type.llvm
    - match: '\b(?<![%\.])(i\d+|void|half|bfloat|float|double|fp128|x86_fp80|ppc_fp128|label|ptr)\b'
      scope: storage.type.primitive.llvm
    - match: <
      push:
        - meta_scope: storage.type.vector.llvm
        - match: ">"
          pop: true
    - match: '(\[[0-9]+ +x +.+?\]+)'
      scope: storage.type.array.llvm
